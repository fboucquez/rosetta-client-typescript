/* tslint:disable */
/* eslint-disable */
/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import { NetworkIdentifier, NetworkIdentifierFromJSON, NetworkIdentifierToJSON, Operation, OperationFromJSON, OperationToJSON } from './';

/**
 * ConstructionPreprocessRequest is passed to the `/construction/preprocess` endpoint so that a Rosetta implementation can determine which metadata it needs to request for construction. Metadata provided in this object should NEVER be a product of live data (i.e. the caller must follow some network-specific data fetching strategy outside of the Construction API to populate required Metadata). If live data is required for construction, it MUST be fetched in the call to `/construction/metadata`.
 * @export
 * @interface ConstructionPreprocessRequest
 */
export interface ConstructionPreprocessRequest {
    /**
     *
     * @type {NetworkIdentifier}
     * @memberof ConstructionPreprocessRequest
     */
    network_identifier: NetworkIdentifier;
    /**
     *
     * @type {Array<Operation>}
     * @memberof ConstructionPreprocessRequest
     */
    operations: Array<Operation>;
    /**
     *
     * @type {any}
     * @memberof ConstructionPreprocessRequest
     */
    metadata?: any;
}

export function ConstructionPreprocessRequestFromJSON(json: any): ConstructionPreprocessRequest {
    return ConstructionPreprocessRequestFromJSONTyped(json, false);
}

export function ConstructionPreprocessRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConstructionPreprocessRequest {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        network_identifier: NetworkIdentifierFromJSON(json['network_identifier']),
        operations: (json['operations'] as Array<any>).map(OperationFromJSON),
        metadata: !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function ConstructionPreprocessRequestToJSON(value?: ConstructionPreprocessRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        network_identifier: NetworkIdentifierToJSON(value.network_identifier),
        operations: (value.operations as Array<any>).map(OperationToJSON),
        metadata: value.metadata,
    };
}
